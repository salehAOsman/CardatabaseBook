# Web Server settings
#2 CONFIG
#THIS FOR SERVER PORT not the same with H2 and sql it takes 9090 
server.port = 8080

# ===============================
# = LOGGING
# ===============================
#1 CONFIG TRACE,DEBUG,INFO,WARN,ERROR,FATAL,OFF            we can log to spring without configuration by 7 deference ways  
logging.level.root = INFO

# ===============================
# = DATA SOURCE
# ===============================

# Set here configurations for the database connection


#Connection url for the database "Local MySQL"
#spring.datasource.url = jdbc:mysql://localhost:3306/Cardatabase?useSSL=false


# Username and password
#spring.datasource.username = root
#spring.datasource.password = root

# Keep the connection alive if idle for a long time (needed in production)
#spring.datasource.testWhileIdle = true
#spring.datasource.validationQuery = SELECT 1

# ===============================
# = JPA / HIBERNATE
# ===============================

# Use spring.jpa.properties.* for Hibernate native properties (the prefix is
# stripped before adding them to the entity manager).

# Show or not log for each sql query
#This enables logging of SQL statements to the console:
spring.jpa.show-sql = true

#this to enable the H2 console and the second setting defines the endPoint that we can use to access the console 
spring.h2.console.enabled = true
spring.h2.console.path = /h2-console

# Hibernate ddl auto (create, create-drop, update): with "update" the database
# schema will be automatically updated accordingly to java entities found in
# the project. Set to none if its up and running
#spring.jpa.hibernate.ddl-auto = update

# Naming strategy
#spring.jpa.hibernate.naming-strategy = org.hibernate.cfg.ImprovedNamingStrategy

# Allows Hibernate to generate SQL optimized for a particular DBMS
#spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect
